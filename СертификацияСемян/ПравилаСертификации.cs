using СертификацияСемян.Данные;

namespace СертификацияСемян;

public class ПравилаСертификации
{
    public static КлассСемян РекомендованныйКлассСемян(ЗаписьИнспекцииПартии инспекцияПартии)
    {
        var классы = new[]
        {
            Порог(инспекцияПартии.СухаяГниль,                new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.МокраяГниль,               new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.Фитофтороз,                new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.ПаршаОбыкновенная,         new []{ 0.0, 5.0, 5.0, 5.0, }),
            Порог(инспекцияПартии.ПаршаЛуговая,              new []{ 0.0, 5.0, 5.0, 5.0, }),
            Порог(инспекцияПартии.ПаршаСеребристая,          new []{ 0.0, 0.5, 1.0, 1.0, }),
            Порог(инспекцияПартии.ПаршаПорошистая,           new []{ 0.0, 1.0, 3.0, 3.0, }),
            Порог(инспекцияПартии.Ризоктониоз,               new []{ 0.0, 1.0, 5.0, 5.0, }),
            Порог(инспекцияПартии.Продавленность,            new []{ 3.0, 3.0, 3.0, 3.0, }),
            //Порог(инспекцияПартии.НезначительныеПовреждения, new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.ВнешниеДефекты,            new []{ 3.0, 3.0, 3.0, 3.0, }),
            Порог(инспекцияПартии.ПрилипшаяПочва,            new []{ 1.0, 1.0, 2.0, 2.0, }),
            Порог(инспекцияПартии.ПревышениеРазмеров,        new []{ 3.0, 3.0, 3.0, 3.0, }),
            //Порог(инспекцияПартии.Проростания,               new []{ 0.0, 0.2, 1.0, 1.0, }),
            //Порог(инспекцияПартии.ВнутренниеДефекты,         new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.РаздавленныеКлубни,        new []{ 0.0, 0.5, 1.0, 1.0, }),
            //Порог(инспекцияПартии.ВирусныйНекроз,            new []{ 0.0, 0.2, 1.0, 1.0, }),
            Порог(инспекцияПартии.Переохлаждение,            new []{ 0.0, 2.0, 2.0, 2.0, }),
            Порог(инспекцияПартии.Вредители,                 new []{ 0.0, 4.0, 4.0, 4.0, }),
        };

        return МинимальныйКлассСемян(классы);
        КлассСемян Порог(int? значение, double[] уровни)
        {
            var процент = 100.0 * (значение ?? 0) / инспекцияПартии.ВесПартии;
            if (процент <= уровни[0])
            {
                return КлассСемян.ПредбазисныйPBTC;
            }

            if (процент <= уровни[1])
            {
                return КлассСемян.ПредбазисныйPB;
            }

            if (процент <= уровни[2])
            {
                return КлассСемян.БазисныйS;
            }

            if (процент <= уровни[3])
            {
                return КлассСемян.СертифицированныйА;
            }

            return КлассСемян.Неизвестный;
        }
    }

    public static КлассСемян РекомендованныйКлассСемян(List<ЗаписьПолевойИнспекции> полевыеИнспекции)
    {
        var объединенныеРезультаты = new ЗаписьПолевойИнспекции()
        {
            КоличествоРастенийВСерии = полевыеИнспекции.Sum(_ => _.КоличествоРастенийВСерии),
            ВиральныеБолезни = полевыеИнспекции.Sum(_ => _.ВиральныеБолезни),
            Черноножка = полевыеИнспекции.Sum(_ => _.Черноножка),
            Безтиповые = полевыеИнспекции.Sum(_ => _.Безтиповые),
        };
        var классы = new[]
        {
            Порог(объединенныеРезультаты.ВиральныеБолезни,         new []{ 0.0, 0.1,  0.2,  0.5,  0.8,  2.0, 6.0 }),
            Порог(объединенныеРезультаты.Черноножка,               new []{ 0.0, 0.0,  0.5,  0.75, 1.0,  1.5, 2.0 }),
            Порог(объединенныеРезультаты.Безтиповые,               new []{ 0.0, 0.01, 0.25, 0.25, 0.25, 0.5, 0.5 }),
        };

        return МинимальныйКлассСемян(классы);
        КлассСемян Порог(int? значение, double[] уровни)
        {
            var процент = 100.0 * (значение ?? 0) / объединенныеРезультаты.КоличествоРастенийВСерии;
            if (процент <= уровни[0])
            {
                return КлассСемян.ПредбазисныйPBTC;
            }

            if (процент <= уровни[1])
            {
                return КлассСемян.ПредбазисныйPB;
            }

            if (процент <= уровни[2])
            {
                return КлассСемян.БазисныйS;
            }

            if (процент <= уровни[3])
            {
                return КлассСемян.БазисныйSE;
            }

            if (процент <= уровни[4])
            {
                return КлассСемян.БазисныйE;
            }

            if (процент <= уровни[5])
            {
                return КлассСемян.СертифицированныйА;
            }

            if (процент <= уровни[6])
            {
                return КлассСемян.СертифицированныйВ;
            }

            return КлассСемян.Неизвестный;
        }
    }

    private static КлассСемян МинимальныйКлассСемян(IEnumerable<КлассСемян> классы)
        => классы.Aggregate(КлассСемян.ПредбазисныйPBTC, МинимальныйКлассСемян);

    private static КлассСемян МинимальныйКлассСемян(КлассСемян класс1, КлассСемян класс2)
    {
        var классы = new[]
        {
            КлассСемян.Неизвестный,
            КлассСемян.СертифицированныйВ,
            КлассСемян.СертифицированныйА,
            КлассСемян.БазисныйE,
            КлассСемян.БазисныйSE,
            КлассСемян.БазисныйS,
            КлассСемян.ПредбазисныйPB,
            КлассСемян.ПредбазисныйPBTC,
        };
        foreach (var целевой in классы)
        {
            if (класс1 == целевой || класс2 == целевой)
            {
                return целевой;
            }
        }

        return КлассСемян.Неизвестный;
    }
}
