@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject ILogger<ДанныеПоля> протоколировщик
@inject IWebHostEnvironment окружение
@inject IStringLocalizer<ДанныеУчастка> Лок 

<label class="form-label">
    @Лок["Название"] <span class="text-danger">*</span>
</label>
<InputText @bind-Value="Модель!.Название" class="form-control" />

<label class="form-label">
    @Лок["Координаты"] <span class="text-danger">*</span>
</label>
<InputText @bind-Value="Модель!.КоординатыУчастка" class="form-control" />

<div style="height: 400px" class="mt-3">
    <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="100%" OnAfterInit="OnAfterInitAsync"></GoogleMap>
</div>


@code {
    [Parameter]
    public УчастокПоля Модель { get; set; }
    private GoogleMap map1;
    private MapOptions mapOptions;

    protected override void OnInitialized()
    {
        var center = GetCoordinates(Модель.КоординатыУчастка);

        mapOptions = new MapOptions()
            {
                Zoom = 15,
                Center = center,
                MapTypeId = MapTypeId.Roadmap
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LatLngLiteral center;
            if (string.IsNullOrWhiteSpace(Модель!.КоординатыУчастка))
            {
                var location = await JSRuntime.InvokeAsync<double[]>("getLocation");
                center = new LatLngLiteral()
                    {
                        Lng = location[0],
                        Lat = location[1],
                    };
                Модель!.КоординатыУчастка = $"{location[0].ToString(CultureInfo.InvariantCulture)},{location[1].ToString(CultureInfo.InvariantCulture)}";
            }
            else
            {
                center = GetCoordinates(Модель.КоординатыУчастка);
            }

            mapOptions = new MapOptions()
                {
                    Zoom = 15,
                    Center = center,
                    MapTypeId = MapTypeId.Roadmap
                };
        }
    }

    private async Task OnAfterInitAsync()
    {
        LatLngLiteral center;
        if (string.IsNullOrWhiteSpace(Модель!.КоординатыУчастка))
        {
            var location = await JSRuntime.InvokeAsync<double[]>("getLocation");
            center = new LatLngLiteral()
                {
                    Lat = location[0],
                    Lng = location[1],
                };

            Модель!.КоординатыУчастка = $"{location[0].ToString(CultureInfo.InvariantCulture)},{location[1].ToString(CultureInfo.InvariantCulture)}";
        }
        else
        {
            center = GetCoordinates(Модель.КоординатыУчастка);
        }

        var инфоОкно = await InfoWindow.CreateAsync(
            this.JSRuntime,
            new InfoWindowOptions()
                {
                    Content = "Выберите где расположен участок, на котором будут производиться семена",
                    Position = center,
                });

        await инфоОкно.Open(map1.InteropObject);
        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) =>
        {
            await инфоОкно.Close();
            инфоОкно = await InfoWindow.CreateAsync(this.JSRuntime,
                new InfoWindowOptions()
                    {
                        Content = "Выберите где расположен участок, на котором будут производиться семена",
                        Position = e.LatLng,
                    });
            await инфоОкно.Open(map1.InteropObject);

            Модель!.КоординатыУчастка = $"{e.LatLng.Lat.ToString(CultureInfo.InvariantCulture)},{e.LatLng.Lng.ToString(CultureInfo.InvariantCulture)}";
            StateHasChanged();
        });
    }

    static LatLngLiteral GetCoordinates(string coordinates)
    {
        if (string.IsNullOrWhiteSpace(coordinates))
        {
            return new LatLngLiteral()
            {
                Lng = 43.2433,
                Lat = 76.8646,
            };
        }

        var parts = coordinates.Split(',');
        if (double.TryParse(parts[0], CultureInfo.InvariantCulture, out var lng) && double.TryParse(parts[1], CultureInfo.InvariantCulture, out var lat))
            return new LatLngLiteral(lng, lat);

        return new LatLngLiteral()
            {
                Lng = 43.2433,
                Lat = 76.8646,
            };
    }
}
