@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using System.Globalization
@inject УправляющийХозяйствами управляющийХозяйствами
@inject IJSRuntime JSRuntime
@inject ILogger<ДанныеЗаявки> протоколировщик
@inject IWebHostEnvironment окружение
@inject IStringLocalizer<ДанныеЗаявки> Лок

<label class="form-label">
    @Лок["ТипСертификации"]
</label>
<InputSelect @bind-Value="Модель!.ТипЗаявки" class="form-control">
    <option value="">@Лок["ВыберитеТип"] ...</option>
    <option value="1">@Глобальные.ТипСертификата_Картофель</option>
</InputSelect>

<label class="form-label">
    @Лок["НазваниеСорта"]
</label>
<InputText @bind-Value="Модель!.НазваниеСортаСемян" class="form-control" />

<label class="form-label">
    @Лок["РазмерКлубня"]
</label>
<InputNumber @bind-Value="Модель!.РазмерКлубня" class="form-control" min="15" max="65" step="5" />

<label class="form-label">
    @Лок["КлассСемян"]
</label>
<InputSelect @bind-Value="Модель!.КлассСемянИд" class="form-control">
    <option value="">@Лок["ВыберитеКлассСемян"] ...</option>
    <option value="1">Предбазисный PBTC</option>
    <option value="2">Предбазисный PB</option>
    <option value="3">Базисный S</option>
    <option value="4">Базисный SE</option>
    <option value="5">Базисный Е</option>
    <option value="6">Сертифицированный А</option>
    <option value="7">Сертифицированный В</option>
</InputSelect>

<div class="row">
    <div class="col">
        <label class="form-label">
            @Лок["Хозяйство"]
        </label>
        <InputSelect Value=@Модель!.ИдХозяйства class="form-control" ValueExpression=@(() => Модель.ИдХозяйства) ValueChanged=@((int? p) => ПриИзменениеХозяйства(p))>
            <option value="">@Лок["ВыберитеХозяйство"] ...</option>
            @foreach (var х in Хозяйства)
            {
                <option value=@х.Ид>@х.НаваниеКомпании</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Поля"]
        </label>
        <InputSelect Value=@Модель!.ИдПоля class="form-control" ValueExpression=@(() => Модель.ИдПоля) ValueChanged=@((int? p) => ПриИзменениеПоля(p))>
            <option value="">@Лок["ВыберитеПоле"] ...</option>
            @foreach (var х in Поля)
            {
                <option value=@х.Ид>@х.Название</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Участки"]
        </label>
        <InputSelect Value=@Модель!.ИдУчастка class="form-control" ValueExpression=@(() => Модель.ИдУчастка) ValueChanged=@((int? p) => ПриИзменениеУчастка(p))>
            <option value="">@Лок["ВыберитеУчасток"] ...</option>
            @foreach (var х in УчасткиПоля)
            {
                <option value=@х.Ид>@х.Название</option>
            }
        </InputSelect>
    </div>
</div>

<label class="form-label">
    @Лок["КоординатыУчастка"]
</label>
<InputText @bind-Value="Модель!.КоординатыУчастка" class="form-control" disabled />

<div style="height: 400px" class="mt-3">
    <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="100%" OnAfterInit="OnAfterInitAsync"></GoogleMap>
</div>
@{
    var прошлыйГод = DateTime.UtcNow.Year - 1;
    var дваГодаНазад = DateTime.UtcNow.Year - 2;
    var триГодаНазад = DateTime.UtcNow.Year - 3;
}
<div class="row">
    <div class="col">
        <label class="form-label">
            @Лок["Севооборот"] @прошлыйГод
        </label>
        <Севооборот @bind-Значение="Модель!.СевооборотПрошлогоГода" />
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Севооборот"] @дваГодаНазад
        </label>
        <Севооборот @bind-Значение="Модель!.Севооборот2ГодаНазад" />
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Севооборот"] @триГодаНазад
        </label>
        <Севооборот @bind-Значение="Модель!.Севооборот3ГодаНазад" />
    </div>
</div>

<label class="form-label">
    @Лок["ИзоляцияПолей"]
</label>
<InputTextArea @bind-Value="Модель!.ИзоляцияПолей" class="form-control" />

<label class="form-label">
    @Лок["СвидетельствоПроисхождения"]
</label>
<InputFile OnChange="@ЗагрузитьСвидетельствоПроисхожденияСемян" class="form-control" />
@if (загружаетсяСвидетельствоПроисхожденияСемян)
{
    <p>@Лок["Загружаем"]...</p>
}
else
{
    if (загруженныеФайлыСвидетельствоПроисхожденияСемян.Count > 0)
    {
        <p>@Лок["ДокументЗагружен"]</p>
    }
}

<label class="form-label">
    @Лок["ЗаключениеОНематодах"]
</label>
<InputFile OnChange="@ЗагрузитьЗаключениеОНематодах" class="form-control" />
@if (загружаетсяЗаключениеОНематодах)
{
    <p>@Лок["Загружаем"]...</p>
}
else
{
    if (загруженныеФайлыЗаключениеОНематодах.Count > 0)
    {
        <p>@Лок["ДокументЗагружен"]</p>
    }
}

<h3>@Лок["ОбработкаУчастка"]</h3>

<label class="form-label">
    @Лок["Протравители"]
</label>
<InputText @bind-Value="Модель!.Протравители" class="form-control" />

<label class="form-label">
    @Лок["Инсектициды"]
</label>
<InputText @bind-Value="Модель!.Инсектициды" class="form-control" />

<label class="form-label">
    @Лок["Фунгициды"]
</label>
<InputText @bind-Value="Модель!.Фунгициды" class="form-control" />

<label class="form-label">
    @Лок["Удобрения"]
</label>
<InputText @bind-Value="Модель!.Удобрения" class="form-control" />

<label class="form-label">
    @Лок["Гербициды"]
</label>
<InputText @bind-Value="Модель!.Гербициды" class="form-control" />

<h3>@Лок["ПараметрыУчасткаИЗасева"]</h3>
<div class="row">
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["ФормаУчастка"]
        </label>
        <InputSelect @bind-Value="Модель!.ФормаУчастка" class="form-control">
            <option value="">@Лок["ВыберитеФорму"] ...</option>
            <option value="1">@Лок["Квадратная"]</option>
            <option value="2">@Лок["Прямоугольная"]</option>
            <option value="3">@Лок["Круглая"]</option>
            <option value="4">@Лок["Нестандартная"]</option>
        </InputSelect>
    </div>
    <div class="col col-md-4">
        <div class="col col-md-4">
            @if (Модель!.ФормаУчастка == 1 || Модель!.ФормаУчастка == 2 || Модель!.ФормаУчастка == 3)
            {
                var text = Модель!.ФормаУчастка switch
                {
                    1 => "Сторона",
                    2 => "Длина",
                    3 => "Радиус",
                    _ => throw new InvalidOperationException()
                };
                <label class="form-label">
                    @Лок["Длина"]
                </label>
                <InputText @bind-Value="Модель!.Размер1" class="form-control" />
            }
        </div>
    </div>
    <div class="col col-md-4">
        <div class="col col-md-4">
            @if (Модель!.ФормаУчастка == 2)
            {
                <label class="form-label">
                    @Лок["Ширина"]
                </label>
                <InputText @bind-Value="Модель!.Размер2" class="form-control" />
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["ПлощадьПосадки"]
        </label>
        <InputText @bind-Value="Модель!.ПлощадьПосадки" class="form-control" />
    </div>
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["РасстояниеМеждуРядами"]
        </label>
        <InputText @bind-Value="Модель!.РасстояниеМеждуРядами" class="form-control" />
    </div>
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["РасстояниеВРяду"]
        </label>
        <InputText @bind-Value="Модель!.РасстояниеВРяду" class="form-control" />
    </div>
</div>
<div class="row">
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["ДатаПосадки"]
        </label>
        <InputDate @bind-Value="Модель!.ДатаПосадки" class="form-control" />
    </div>
    <div class="col col-md-4">
        <label class="form-label">
            @Лок["ПланируемаяДатаУборки"]
        </label>
        <InputDate @bind-Value="Модель!.ДатаСбора" class="form-control" />
    </div>
</div>

@code {
    private GoogleMap map1;
    private MapOptions mapOptions;

    [Parameter]
    public МодельЗаявки Модель { get; set; }

    [Parameter]
    public string Пользователь { get; set; }

    public List<ПроизводительСемян> Хозяйства { get; set; } = new();

    public List<Поле> Поля { get; set; } = new();

    public List<УчастокПоля> УчасткиПоля { get; set; } = new();

    private long максРазмерФайла = 1024 * 1024 * 15;
    private int максКоличествоФайлов = 1;
    private List<IBrowserFile> загруженныеФайлыСвидетельствоПроисхожденияСемян = new();
    private bool загружаетсяСвидетельствоПроисхожденияСемян;
    private List<IBrowserFile> загруженныеФайлыЗаключениеОНематодах = new();
    private bool загружаетсяЗаключениеОНематодах;

    private async Task ЗагрузитьСвидетельствоПроисхожденияСемян(InputFileChangeEventArgs e)
    {
        Directory.CreateDirectory(Path.Combine(окружение.ContentRootPath, "uploads", "intermediate"));
        загружаетсяСвидетельствоПроисхожденияСемян = true;
        загруженныеФайлыСвидетельствоПроисхожденияСемян.Clear();

        foreach (var файл in e.GetMultipleFiles(максКоличествоФайлов))
        {
            try
            {
                загруженныеФайлыСвидетельствоПроисхожденияСемян.Add(файл);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(окружение.ContentRootPath, "uploads", "intermediate", trustedFileNameForFileStorage);

                await using (FileStream fs = new(path, FileMode.Create))
                {
                    await файл.OpenReadStream(максРазмерФайла).CopyToAsync(fs);
                }

                Модель.СвидетельствоПроисхожденияСемян = File.ReadAllBytes(path);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                протоколировщик.LogError("Файл: {Filename} Ошибка: {Error}", файл.Name, ex.Message);
            }
        }

        загружаетсяСвидетельствоПроисхожденияСемян = false;
    }

    private async Task ЗагрузитьЗаключениеОНематодах(InputFileChangeEventArgs e)
    {
        Directory.CreateDirectory(Path.Combine(окружение.ContentRootPath, "uploads", "intermediate"));
        загружаетсяЗаключениеОНематодах = true;
        загруженныеФайлыЗаключениеОНематодах.Clear();

        foreach (var файл in e.GetMultipleFiles(максКоличествоФайлов))
        {
            try
            {
                загруженныеФайлыЗаключениеОНематодах.Add(файл);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(окружение.ContentRootPath, "uploads", "intermediate", trustedFileNameForFileStorage);

                await using (FileStream fs = new(path, FileMode.Create))
                {
                    await файл.OpenReadStream(максРазмерФайла).CopyToAsync(fs);
                }

                Модель.ЗаключениеОНематодах = File.ReadAllBytes(path);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                протоколировщик.LogError("Файл: {Filename} Ошибка: {Error}", файл.Name, ex.Message);
            }
        }

        загружаетсяЗаключениеОНематодах = false;
    }

    protected override void OnInitialized()
    {
        var center = new LatLngLiteral()
            {
                Lng = 43.2433,
                Lat = 76.8646,
            };
        mapOptions = new MapOptions()
            {
                Zoom = 15,
                Center = center,
                MapTypeId = MapTypeId.Roadmap
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var location = await JSRuntime.InvokeAsync<double[]>("getLocation");
            var center = new LatLngLiteral()
                {
                    Lng = location[0],
                    Lat = location[1],
                };
            Модель!.КоординатыУчастка = $"{location[0].ToString(CultureInfo.InvariantCulture)},{location[1].ToString(CultureInfo.InvariantCulture)}";

            mapOptions = new MapOptions()
                {
                    Zoom = 15,
                    Center = center,
                    MapTypeId = MapTypeId.Roadmap
                };
        }
    }

    protected override void OnParametersSet()
    {
        Хозяйства = управляющийХозяйствами.ПолучитьХозяйстваПользователя(Пользователь);
        ПриИзменениеХозяйства(Модель.ИдХозяйства);
        ПриИзменениеПоля(Модель.ИдПоля);
        base.OnParametersSet();
    }

    private void ПриИзменениеХозяйства(int? новоеЗначение)
    {
        Модель.ИдХозяйства = новоеЗначение;
        if (новоеЗначение.HasValue)
        {
            Поля.Clear();
            Поля = управляющийХозяйствами.ПолучитьПоляХозяйства(новоеЗначение.Value);
        }
    }

    private void ПриИзменениеПоля(int? новоеЗначение)
    {
        Модель.ИдПоля = новоеЗначение;
        if (новоеЗначение.HasValue)
        {
            УчасткиПоля.Clear();
            УчасткиПоля = управляющийХозяйствами.ПолучитьУчасткиПоля(новоеЗначение.Value);
        }
    }

    private void ПриИзменениеУчастка(int? новоеЗначение)
    {
        Модель.ИдУчастка = новоеЗначение;
    }

    private async Task УстановитьКоординатыПоля(double широта, double долгота)
    {
        if (инфоОкно is not null)
        {
            await инфоОкно.Close();
        }

        инфоОкно = await InfoWindow.CreateAsync(this.JSRuntime,
            new InfoWindowOptions()
                {
                    Content = "Выберите где расположен участок, на котором будут производиться семена",
                    Position = new LatLngLiteral(широта, долгота),
                });
        await инфоОкно.Open(map1.InteropObject);

        Модель!.КоординатыУчастка = $"{широта},{долгота}";
    }

    private InfoWindow? инфоОкно;
    private async Task OnAfterInitAsync()
    {
        var location = await JSRuntime.InvokeAsync<double[]>("getLocation");
        var center = new LatLngLiteral()
            {
                Lat = location[0],
                Lng = location[1],
            };

        Модель!.КоординатыУчастка = $"{location[0].ToString(CultureInfo.InvariantCulture)},{location[1].ToString(CultureInfo.InvariantCulture)}";

        инфоОкно = await InfoWindow.CreateAsync(
            this.JSRuntime,
            new InfoWindowOptions()
                {
                    Content = "Выберите где расположен участок, на котором будут производиться семена",
                    Position = center,
                });

        await инфоОкно.Open(map1.InteropObject);
        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) =>
        {
            await УстановитьКоординатыПоля(e.LatLng.Lat, e.LatLng.Lng);
            StateHasChanged();
        });
    }
}