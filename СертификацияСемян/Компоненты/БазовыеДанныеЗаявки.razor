@using System.Globalization
@inject УправляющийХозяйствами управляющийХозяйствами
@inject ILogger<ДанныеЗаявки> протоколировщик
@inject IStringLocalizer<ДанныеЗаявки> Лок

<label class="form-label">
    @Лок["ТипСертификации"]
</label>
<InputSelect @bind-Value="Модель!.ТипЗаявки" class="form-control">
    <option value="">@Лок["ВыберитеТип"] ...</option>
    <option value="1">@Глобальные.ТипСертификата_Картофель</option>
</InputSelect>

<label class="form-label">
    @Лок["НазваниеСорта"]
</label>
<InputText @bind-Value="Модель!.НазваниеСортаСемян" class="form-control" />

<label class="form-label">
    @Лок["РазмерКлубня"]
</label>
<InputNumber @bind-Value="Модель!.РазмерКлубня" class="form-control" min="15" max="65" step="5" />

<label class="form-label">
    @Лок["КлассСемян"]
</label>
<InputSelect @bind-Value="Модель!.КлассСемянИд" class="form-control">
    <option value="">@Лок["ВыберитеКлассСемян"] ...</option>
    <option value="1">Предбазисный PBTC</option>
    <option value="2">Предбазисный PB</option>
    <option value="3">Базисный S</option>
    <option value="4">Базисный SE</option>
    <option value="5">Базисный Е</option>
    <option value="6">Сертифицированный А</option>
    <option value="7">Сертифицированный В</option>
</InputSelect>

<div class="row">
    <div class="col">
        <label class="form-label">
            @Лок["Хозяйство"]
        </label>
        <InputSelect Value=@Модель!.ИдХозяйства class="form-control" ValueExpression=@(() => Модель.ИдХозяйства) ValueChanged=@((int? p) => ПриИзменениеХозяйства(p))>
            <option value="">@Лок["ВыберитеХозяйство"] ...</option>
            @foreach (var х in Хозяйства)
            {
                <option value=@х.Ид>@х.НаваниеКомпании</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Поля"]
        </label>
        <InputSelect Value=@Модель!.ИдПоля class="form-control" ValueExpression=@(() => Модель.ИдПоля) ValueChanged=@((int? p) => ПриИзменениеПоля(p))>
            <option value="">@Лок["ВыберитеПоле"] ...</option>
            @foreach (var х in Поля)
            {
                <option value=@х.Ид>@х.Название</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label class="form-label">
            @Лок["Участки"]
        </label>
        <InputSelect Value=@Модель!.ИдУчастка class="form-control" ValueExpression=@(() => Модель.ИдУчастка) ValueChanged=@((int? p) => ПриИзменениеУчастка(p))>
            <option value="">@Лок["ВыберитеУчасток"] ...</option>
            @foreach (var х in УчасткиПоля)
            {
                <option value=@х.Ид>@х.Название</option>
            }
        </InputSelect>
    </div>
</div>

<label class="form-label">
    @Лок["КоординатыУчастка"]
</label>
<InputText @bind-Value="Модель!.КоординатыУчастка" class="form-control" disabled />

@code {
    [Parameter]
    public МодельЗаявки Модель { get; set; }

    [Parameter]
    public string Пользователь { get; set; }

    public List<ПроизводительСемян> Хозяйства { get; set; } = new();

    public List<Поле> Поля { get; set; } = new();

    public List<УчастокПоля> УчасткиПоля { get; set; } = new();

    protected override void OnParametersSet()
    {
        Хозяйства = управляющийХозяйствами.ПолучитьХозяйстваПользователя(Пользователь);
        ПриИзменениеХозяйства(Модель.ИдХозяйства);
        ПриИзменениеПоля(Модель.ИдПоля);
        base.OnParametersSet();
    }

    private void ПриИзменениеХозяйства(int? новоеЗначение)
    {
        Модель.ИдХозяйства = новоеЗначение;
        if (новоеЗначение.HasValue)
        {
            Поля.Clear();
            Поля = управляющийХозяйствами.ПолучитьПоляХозяйства(новоеЗначение.Value);
        }
    }

    private void ПриИзменениеПоля(int? новоеЗначение)
    {
        Модель.ИдПоля = новоеЗначение;
        if (новоеЗначение.HasValue)
        {
            УчасткиПоля.Clear();
            УчасткиПоля = управляющийХозяйствами.ПолучитьУчасткиПоля(новоеЗначение.Value);
        }
    }

    private void ПриИзменениеУчастка(int? новоеЗначение)
    {
        Модель.ИдУчастка = новоеЗначение;
    }
}