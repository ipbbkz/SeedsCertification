@page "/inspectors/delete/{ИдИнспектора}"
@attribute [Authorize(Policy = "ТребуетсяБытьАдминистратором")]
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using СертификацияСемян.Данные;
@inject UserManager<ПользовательПриложения> МенеджерПользователей
@inject NavigationManager управляющийНавигацией
@inject IStringLocalizer<Инспекторы> Лок
@inject IUserStore<ПользовательПриложения> хранилищеПользователей
@inject SignInManager<ПользовательПриложения> signInManager
@inject IEmailSender emailSender

<PageTitle>@Лок["УдалитьИнспектора"]</PageTitle>

<h3>@Лок["УдалитьИнспектора"]</h3>
<div class="alert alert-danger" role="alert">
    @Глобальные.ПредупреждениеПроУдаление
</div>

<EditForm EditContext=@контекстРедактирования OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled>
        <ДанныеПользователя Модель=@Модель />
    </fieldset>

    <button type="submit" class="btn btn-primary">@Глобальные.Удалить</button>
    <a href="/inspectors" class="btn btn-secondary">@Глобальные.Назад</a>
</EditForm>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? состояниеАвторизации { get; set; }
    private EditContext? контекстРедактирования;

    [Parameter]
    public string? ИдИнспектора { get; set; }

    public МодельПользователя Модель { get; set; } = new МодельПользователя();

    protected override void OnInitialized()
    {
        контекстРедактирования = new(Модель);
    }

    protected override async Task OnParametersSetAsync()
    {
        var result = await МенеджерПользователей.FindByIdAsync(ИдИнспектора);
        if (result != null)
        {
            Модель.Фамилия = result.Фамилия;
            Модель.Имя = result.Имя;
            Модель.Отчество = result.Отчество;
            Модель.Почта = result.Email;
        }
        await base.OnParametersSetAsync();
    }

    private async Task Submit()
    {
        var result = await МенеджерПользователей.FindByIdAsync(ИдИнспектора);
        await МенеджерПользователей.DeleteAsync(result);
        управляющийНавигацией.NavigateTo("/inspectors");
    }
}
