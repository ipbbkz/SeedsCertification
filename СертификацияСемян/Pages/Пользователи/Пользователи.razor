@page "/farmers"
@attribute [Authorize(Policy = "ТребуетсяБытьАдминистратором")]
@using Microsoft.AspNetCore.Identity
@using СертификацияСемян.Данные;
@inject UserManager<ПользовательПриложения> МенеджерПользователей
@inject УправляющийХозяйствами управляющийХозяйствами
@inject IStringLocalizer<Пользователи> Лок

<PageTitle>@Лок["Фермеры"]</PageTitle>
<h3>
    @Лок["Фермеры"]
</h3>

<table class="table">
    <thead>
        <tr>
            @*<td>Id</td>*@
            <td>Farms</td>
            <td>Email</td>
            <td>Email Confirmed</td>
            <td></td>
        </tr>
    </thead>
    <tbody>
        @foreach (var ф in фермеры)
        {
            <tr>
                @*<td>
                    @ф.Пользователь.Id
            </td>*@
                <td>
                    @string.Join(", ", ф.Фермы.Select(ф => ф.НаваниеКомпании))
                </td>
                <td>
                    @ф.Пользователь.Email
                </td>
                <td>
                    @ф.Пользователь.EmailConfirmed
                </td>
                <td>
                    <AuthorizeView Policy="ТребуетсяБытьСуперАдминистратором">
                        <a href="/farmers/delete/@ф.Пользователь.Id" class="btn btn-danger">@Глобальные.Удалить</a>
                    </AuthorizeView>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IList<МодельФермера> фермеры = Array.Empty<МодельФермера>();

    protected override async Task OnParametersSetAsync()
    {
        фермеры = await ПолучитьФермеров();
        await base.OnParametersSetAsync();
    }

    internal async Task<List<МодельФермера>> ПолучитьФермеров()
    {
        var пользователи = await МенеджерПользователей.GetUsersInRoleAsync(Константы.РольФермер);
        List<МодельФермера> результат = new();
        foreach (var п in пользователи)
        {
            var фермы = управляющийХозяйствами.ПолучитьХозяйстваПользователя(п.Id);
            результат.Add(new МодельФермера(п, фермы));
        }

        return результат;
    }

    internal class МодельФермера
    {
        public МодельФермера(ПользовательПриложения пользователь, IList<ПроизводительСемян> фермы)
        {
            Пользователь = пользователь;
            Фермы = фермы;
        }

        public ПользовательПриложения Пользователь { get; }
        public IList<ПроизводительСемян> Фермы { get; }
    }
}
