@page "/farms/delete/{Ид:int}"
@inject УправляющийХозяйствами управляющийХозяйствами
@inject NavigationManager управляющийНавигацией
@inject IStringLocalizer<УдалитьФерму> Лок
@inject IStringLocalizer<Глобальные> ГлобЛок
@attribute [Authorize(Policy = "Фермеры")]

<PageTitle>@Лок["УдалитьФерму"]</PageTitle>
<h3>@Лок["УдалитьФерму"]</h3>
<div class="alert alert-danger" role="alert">
    @Лок["УдаляйтеЗапись"].
</div>

<EditForm Model="@Модель" OnValidSubmit="@Submit" disable>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled>
    <ДанныеФермы Модель=@Модель />
    </fieldset>

    <button type="submit" class="btn btn-danger">@ГлобЛок["Удалить"]</button>
    <a href="/farms" class="btn btn-secondary">@ГлобЛок["Удалить"]</a>
</EditForm>
@code {
    [Parameter]
    public int Ид { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? состояниеАвторизации { get; set; }

    public Хозяйство? Модель { get; set; }

    protected override void OnInitialized() => Модель ??= new();

    protected override void OnParametersSet()
    {
        var хозяйство = управляющийХозяйствами.ПолучитьХозяйство(Ид);
        if (хозяйство is not null)
        {
            Модель.Бин = хозяйство.БинИлиИин;
            Модель.НаваниеКомпании = хозяйство.НаваниеКомпании;
            Модель.ЮридическийАдрес = хозяйство.ЮридическийАдрес;
            Модель.КонтактноеЛицо = хозяйство.КонтактноеЛицо;
            Модель.ЭлектроннаяПочтаКонтактногоЛица = хозяйство.ЭлектроннаяПочтаКонтактногоЛица;
            Модель.НомерТелефонаКонтактногоЛица = хозяйство.НомерТелефонаКонтактногоЛица;

        }

        base.OnParametersSet();
    }

    private async Task Submit()
    {
        var идЛичности = await состояниеАвторизации.ПолучитьИдентификаторБезопасности();
        if (идЛичности is null)
        {
            return;
        }

        управляющийХозяйствами.УдалитьХозяйство(Ид);
        управляющийНавигацией.NavigateTo("/farms");
    }

}
