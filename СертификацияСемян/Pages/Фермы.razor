@page "/farms"
@using System.Security.Claims;
@using СертификацияСемян.Данные;
@attribute [Authorize(Policy = "Фермеры")]
@inject УправляющийХозяйствами управляющийХозяйствами
<h3>Фермы</h3>
@if (хозяйства.Count == 0)
{
    <p>Создайте новое хозяйство</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>КонтактноеЛицо</td>
                <td>Навание Компании</td>
                <td>БИН/ИИН</td>
                <td>Юридический Адрес</td>
                <td>Контакты</td>
                <td>Активно</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var ф in хозяйства)
            {
                <tr>
                    <td>
                        @ф.КонтактноеЛицо
                    </td>
                    <td>
                        @ф.НаваниеКомпании
                    </td>
                    <td>
                        @ф.БинИлиИин
                    </td>
                    <td>
                        @ф.ЮридическийАдрес
                    </td>
                    <td>
                        @ф.ЭлектроннаяПочтаКонтактногоЛица

                        @ф.НомерТелефонаКонтактногоЛица
                    </td>
                    <td>
                        @ф.Активно
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? состояниеАвторизации { get; set; }

    private IList<ПроизводительСемян> хозяйства = Array.Empty<ПроизводительСемян>();

    protected override async Task OnParametersSetAsync()
    {
        var идЛичности = await состояниеАвторизации.ПолучитьИдентификаторБезопасности();
        if (идЛичности is not null)
        {
            хозяйства = управляющийХозяйствами.ПолучитьХозяйстваПользователя(идЛичности);
        }
        
        await base.OnParametersSetAsync();
    }
}
