@page "/farms/{Ид:int}/fields/{ИдПоля:int}/patches/{ИдУчастка:int}/delete"
@inject УправляющийХозяйствами управляющийХозяйствами
@inject NavigationManager управляющийНавигацией
@attribute [Authorize(Policy = "Фермеры")]

<PageTitle>Удалить участок</PageTitle>

<h3>Удалить участок</h3>

<EditForm Model="@Модель" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled>
        <ДанныеУчастка Модель=@Модель />
    </fieldset>

    <button type="submit" class="btn btn-danger">Удалить</button>
</EditForm>
@code {
    [Parameter]
    public int Ид { get; set; }

    [Parameter]
    public int ИдПоля { get; set; }

    [Parameter]
    public int ИдУчастка { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? состояниеАвторизации { get; set; }

    public УчастокПоля? Модель { get; set; }

    protected override void OnInitialized() => Модель ??= new();

    protected override void OnParametersSet()
    {
        var поле = управляющийХозяйствами.ПолучитьУчасток(ИдУчастка);
        if (поле is not null)
        {
            Модель.Название = поле.Название;
            Модель.КоординатыУчастка = поле.КоординатыУчастка;
        }

        base.OnParametersSet();
    }

    private async Task Submit()
    {
        var идЛичности = await состояниеАвторизации.ПолучитьИдентификаторБезопасности();
        if (идЛичности is null)
        {
            return;
        }

        управляющийХозяйствами.УдалитьУчасток(ИдУчастка);
        управляющийНавигацией.NavigateTo($"/farms/{Ид}/fields/{ИдПоля}/patches");
    }

}
