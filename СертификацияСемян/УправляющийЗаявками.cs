using Microsoft.EntityFrameworkCore;
using СертификацияСемян.Данные;

namespace СертификацияСемян;

public class УправляющийЗаявками
{
    private readonly КонтекстБдПриложения контекст;

    public УправляющийЗаявками(КонтекстБдПриложения контекст)
    {
        this.контекст = контекст;
    }

    public IList<Заявка> ПолучитьСтраницуЗаявок(int counter)
    {
        return контекст.Заявки
            .AsNoTracking()
            .Include(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .OrderByDescending(з => з.ДатаСоздания).Skip(20 * counter).Take(20).ToList();
    }

    public IList<Заявка> ПолучитьЗаявкиНаСертификацию()
    {
        return контекст.Заявки
            .AsNoTracking()
            .Include(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .Where(_ => _.Статус == 2)
            .OrderByDescending(з => з.ДатаСоздания).ToList();
    }

    public IList<Заявка> ПолучитьЗаявкиПользователя(string идПользователя)
    {
        return контекст.Заявки
            .AsNoTracking()
            .Include(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .Where(_ => _.УчастокПоля.Поле.ПроизводительСемян.ИдВладельца == идПользователя && _.ДатаУдаления == null).ToList();
    }

    public byte[] ПолучитьЗаключениеОНематодах(int идПоля)
    {
        return ПолучитьЗаявку(идПоля).ЗаключениеОНематодах;
    }

    public byte[] ПолучитьСвидетельствоПроисхожденияСемян(int идПоля)
    {
        return ПолучитьЗаявку(идПоля).СвидетельствоПроисхожденияСемян;
    }

    public Заявка? ПолучитьЗаявкуПользователя(string идПользователя, int идЗаявки) =>
        контекст.Заявки
            .AsNoTracking()
            .Include(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .FirstOrDefault(_ => _.УчастокПоля.Поле.ПроизводительСемян.ИдВладельца == идПользователя && _.Ид == идЗаявки && _.ДатаУдаления == null);

    public Заявка? ПолучитьЗаявку(int идЗаявки) => контекст.Заявки.AsNoTracking()
        .Include(_ => _.УчастокПоля)
        .ThenInclude(_ => _.Поле)
        .ThenInclude(_ => _.ПроизводительСемян)
        .FirstOrDefault(x => x.Ид == идЗаявки);

    public List<МодельСертификатаПроисхождения> ПолучитьИсториюПроисхождения(int идЗаявки)
    {
        var заявка = ПолучитьЗаявку(идЗаявки);
        var результат = new List<МодельСертификатаПроисхождения>();
        if (заявка is not null)
        {
            результат.Add(new()
            {
                Код = заявка.КодСертификатаПроисхождения,
                ГодВыпуска = заявка.ГодПроизводстваСемян,
                НазваниеКомпании = заявка.НаваниеКомпанииПроизводителя,
                СтранаПроизводитель = заявка.СтранаПроизводитель,
            });
            if (заявка.ИдСертификатаПроисхождения != null)
            {
                if (заявка.КодСертификатаПроисхождения.Length >= 10)
                {
                    var партия = ПолучитьПроданнуюПартию(заявка.ИдСертификатаПроисхождения.Value);
                    if (партия is not null)
                    {
                        результат.Add(new()
                        {
                            Код = партия.Код,
                            ГодВыпуска = партия.ДатаВыпуска.Year,
                            НазваниеКомпании = партия.Сертификат.Заявка.УчастокПоля.Поле.ПроизводительСемян.НаваниеКомпании,
                            СтранаПроизводитель = "Қазақстан",
                        });
                        ДобавитьЦепочкуСертификата(партия.СертификатИд);
                    }
                }
                else
                { 
                    ДобавитьЦепочкуСертификата(заявка.ИдСертификатаПроисхождения.Value);
                }
            }
        }

        return результат;

        void ДобавитьЦепочкуСертификата(int идСертификата)
        {
            var сертификат = ПолучитьСертификат(идСертификата);
            if (сертификат is not null)
            {
                результат.Add(new()
                {
                    Код = сертификат.Код,
                    ГодВыпуска = сертификат.ДатаВыпуска.Year,
                    НазваниеКомпании = сертификат.Заявка.УчастокПоля.Поле.ПроизводительСемян.НаваниеКомпании,
                    СтранаПроизводитель = "Қазақстан",
                });
                результат.AddRange(ПолучитьИсториюПроисхождения(сертификат.ЗаявкаИд));
            }
        }
    }

    public void ДобавитьЗаявку(
        int ТипЗаявки,
        int ИдУчастка,
        int КлассСемянИд,
        string НаваниеСортаСемян,
        int РазмерКлубня,
        string КоординатыУчастка,
        string СевооборотПрошлогоГода,
        string Севооборот2ГодаНазад,
        string Севооборот3ГодаНазад,
        string ИзоляцияПолей,
        string СтранаПроизводитель,
        string КодСертификатаПроисхождения,
        int? ИдСертификатаПроисхождения,
        byte[] СвидетельствоПроисхожденияСемян,
        byte[] ЗаключениеОНематодах,
        string Протравители,
        string Инсектициды,
        string Фунгициды,
        string Удобрения,
        string Гербициды,
        int ФормаУчастка,
        string? Размер1,
        string? Размер2,
        string ПлощадьПосадки,
        string РасстояниеМеждуРядами,
        string РасстояниеВРяду,
        string ПрогнозируемоеКоличествоУрожая,
        DateTime ДатаПосадки,
        DateTime ДатаСбора)
    {
        контекст.Заявки.Add(new Заявка()
        {
            ИдУчастка = ИдУчастка,
            ТипЗаявки = ТипЗаявки,
            КлассСемянИд = КлассСемянИд,
            НаваниеСортаСемян = НаваниеСортаСемян,
            РазмерКлубня = РазмерКлубня,
            КоординатыУчастка = КоординатыУчастка,
            СевооборотПрошлогоГода = СевооборотПрошлогоГода,
            Севооборот2ГодаНазад = Севооборот2ГодаНазад,
            Севооборот3ГодаНазад = Севооборот3ГодаНазад,
            ИзоляцияПолей = ИзоляцияПолей,
            СтранаПроизводитель = СтранаПроизводитель,
            КодСертификатаПроисхождения = КодСертификатаПроисхождения,
            ИдСертификатаПроисхождения = ИдСертификатаПроисхождения,
            СвидетельствоПроисхожденияСемян = СвидетельствоПроисхожденияСемян,
            ЗаключениеОНематодах = ЗаключениеОНематодах,
            Протравители = Протравители,
            Инсектициды = Инсектициды,
            Фунгициды = Фунгициды,
            Удобрения = Удобрения,
            Гербициды = Гербициды,
            ФормаУчастка = ФормаУчастка,
            Размер1 = Размер1,
            Размер2 = Размер2,
            ПлощадьПосадки = ПлощадьПосадки,
            РасстояниеМеждуРядами = РасстояниеМеждуРядами,
            РасстояниеВРяду = РасстояниеВРяду,
            ПрогнозируемоеКоличествоУрожая = ПрогнозируемоеКоличествоУрожая,
            ДатаПосадки = ДатаПосадки,
            ДатаСбора = ДатаСбора,
            Активно = true,
            Статус = 1,
        });
        контекст.SaveChanges();
    }

    public void ОтправитьНаСертификацию(int ид)
    {
        контекст.Заявки
            .Where(и => и.Ид == ид)
            .ExecuteUpdate(_ => _
                .SetProperty(и => и.Статус, 2));
    }

    public void ВыпуститьСертификат(int ид, int классСемянИд, int валовыйУрожай)
    {
        контекст.Заявки
            .Where(и => и.Ид == ид)
            .ExecuteUpdate(_ => _
                .SetProperty(и => и.Статус, 3));
        контекст.Сертификаты.Add(new Сертификат
        {
            ВаловыйПродукт = валовыйУрожай,
            КлассСемянИд = классСемянИд,
            ЗаявкаИд = ид,
            ДатаВыпуска = DateTime.UtcNow,
        });
        контекст.SaveChanges();
    }

    public List<Сертификат> ПолучитьСертификаты()
        => контекст.Сертификаты
            .AsNoTracking()
            .Include(_ => _.Заявка)
            .ToList();

    public Сертификат? ПолучитьСертификат(int идСертификата)
        => контекст.Сертификаты
            .AsNoTracking()
            .Include(_ => _.Заявка)
            .ThenInclude(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .FirstOrDefault(_ => _.Ид == идСертификата);

    public СертифицированнаяПартия? ПолучитьПартию(int идСертификата)
        => контекст.СертифицированныеПартии
            .AsNoTracking()
            .Include(_ => _.Сертификат)
            .ThenInclude(_ => _.Заявка)
            .ThenInclude(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .FirstOrDefault(_ => _.Ид == идСертификата);

    public List<Сертификат> ПолучитьСертификатыПользователя(string идЛичности)
        => контекст.Сертификаты
            .AsNoTracking()
            .Include(_ => _.Заявка)
            //.ThenInclude(_ => _.УчастокПоля)
            //.ThenInclude(_ => _.Поле)
            //.ThenInclude(_ => _.ПроизводительСемян)
            .Where(_ => _.Заявка.УчастокПоля.Поле.ПроизводительСемян.ИдВладельца == идЛичности)
            .ToList();

    public List<СертифицированнаяПартия> ПолучитьПроданныеПартииПользователя(string идЛичности)
        => контекст.СертифицированныеПартии
            .AsNoTracking()
            .Include(_ => _.Сертификат)
            .ThenInclude(_ => _.Заявка)
            //.ThenInclude(_ => _.УчастокПоля)
            //.ThenInclude(_ => _.Поле)
            //.ThenInclude(_ => _.ПроизводительСемян)
            .Where(_ => _.Сертификат.Заявка.УчастокПоля.Поле.ПроизводительСемян.ИдВладельца == идЛичности)
            .ToList();

    public СертифицированнаяПартия? ПолучитьПроданнуюПартию(int идПартии)
        => контекст.СертифицированныеПартии
            .AsNoTracking()
            .Include(_ => _.Сертификат)
            .ThenInclude(_ => _.Заявка)
            //.ThenInclude(_ => _.УчастокПоля)
            //.ThenInclude(_ => _.Поле)
            //.ThenInclude(_ => _.ПроизводительСемян)
            .FirstOrDefault(_ => _.Ид == идПартии);

    public void ДобавитьПартию(
        int ИдСертификата,
        int ВесПартии,
        DateTime ДатаВыпуска)
    {
        контекст.СертифицированныеПартии.Add(new СертифицированнаяПартия()
        {
            СертификатИд = ИдСертификата,
            ВесПартии = ВесПартии,
            ДатаВыпуска = ДатаВыпуска,
        });
        контекст.SaveChanges();
    }

    public IList<МодельСертификата> НайтиСертификаты(string? код)
    {
        код = (код ?? "").Trim();
        var сертификаты = контекст.Сертификаты
            .Include(_ => _.Заявка)
            .ThenInclude(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .ToList()
            .Where(_ => _.Код.Contains(код))
            .Select(_ => new МодельСертификата()
            {
                Ид = _.Ид,
                Код = _.Код,
                ТипСертификата = 1,
                БинИин = _.Заявка.УчастокПоля.Поле.ПроизводительСемян.БинИлиИин,
                НазваниеКомпании = _.Заявка.УчастокПоля.Поле.ПроизводительСемян.НаваниеКомпании,
                ДатаВыпуска = _.ДатаВыпуска,
            });
        var сертификатыПартии = контекст.СертифицированныеПартии
            .Include(_ => _.Сертификат)
            .ThenInclude(_ => _.Заявка)
            .ThenInclude(_ => _.УчастокПоля)
            .ThenInclude(_ => _.Поле)
            .ThenInclude(_ => _.ПроизводительСемян)
            .ToList()
            .Where(_ => _.Код.Contains(код))
            .Select(_ => new МодельСертификата()
            {
                Ид = _.Ид,
                Код = _.Код,
                ТипСертификата = 2,
                БинИин = _.Сертификат.Заявка.УчастокПоля.Поле.ПроизводительСемян.БинИлиИин,
                НазваниеКомпании = _.Сертификат.Заявка.УчастокПоля.Поле.ПроизводительСемян.НаваниеКомпании,
                ДатаВыпуска = _.ДатаВыпуска,
            });
        return сертификаты
            .Union(сертификатыПартии)
            .ToList();
    }
}
