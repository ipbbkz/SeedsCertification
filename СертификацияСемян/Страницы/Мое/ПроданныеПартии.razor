@page "/my/certificates/{ИдСертификата:int}/sales"

@using СертификацияСемян.Данные;
@attribute [Authorize(Policy = "Фермеры")]
@inject УправляющийЗаявками управляющийЗаявками
@inject IStringLocalizer<Сертификаты> Лок

<h3>@Лок["Проданные Партии"]</h3>

<table class="table">
    <thead>
        <tr>
            <td>#</td>
            <td>@Лок["Сорт"]</td>
            <td>@Лок["КлассСемян"]</td>
            <td>@Лок["ДатаВыпуска"]</td>
            <td>@Лок["ВесПартии"]</td>
            <td>@Лок["Сертификат"]</td>
            <td>@Глобальные.Действия</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var з in партии)
        {
            <tr>
                <td>
                    @з.Ид
                </td>
                <td>
                    @з.Сертификат.Заявка.НаваниеСортаСемян
                </td>
                <td>
                    <КлассСемян Значение="з.Сертификат.КлассСемянИд" />
                </td>
                <td>
                    @з.ДатаВыпуска.ToShortDateString()
                </td>
                <td>
                    @з.ВесПартии
                </td>
                <td>
                    <a href="/certificates/@з.Ид/sales/certificate">@Глобальные.Детали</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? состояниеАвторизации { get; set; }

    [Parameter]
    public int ИдСертификата { get; set; }

    private IList<СертифицированнаяПартия> партии = Array.Empty<СертифицированнаяПартия>();

    protected override async Task OnParametersSetAsync()
    {
        var идЛичности = await состояниеАвторизации.ПолучитьИдентификаторБезопасности();
        if (идЛичности is not null)
        {
            партии = управляющийЗаявками.ПолучитьПроданныеПартииПользователя(идЛичности);
        }
    }
}
