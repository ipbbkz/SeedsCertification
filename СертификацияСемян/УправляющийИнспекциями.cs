namespace СертификацияСемян;

using Microsoft.EntityFrameworkCore;
using СертификацияСемян.Данные;

public class УправляющийИнспекциями
{
    private readonly КонтекстБдПриложения контекст;

    public УправляющийИнспекциями(КонтекстБдПриложения контекст)
    {
        this.контекст = контекст;
    }

    public IList<Инспекция> ПолучитьИнспекцииЗаявки(int идЗаявки)
    {
        return контекст.Инспекции
            .AsNoTracking()
            .Where(_ => _.ЗаявкаИд == идЗаявки)
            .OrderByDescending(з => з.ДатаСоздания).ToList();
    }

    public void ЗапланироватьИнспекцию(int идЗаявки, int типИнспекции, DateTime планируемаяДата, DateTime? фактическаяДата, string физиологическаяСтадия, string? общиеУсловнияПоля, string имяВедущегоИнспектора, string? имяВторогоИнспектора)
    {
        контекст.Инспекции.Add(new Инспекция()
        {
            ЗаявкаИд = идЗаявки,
            ТипИнспекции = типИнспекции,
            ПланируемаяДата = планируемаяДата,
            ФактическаяДата = фактическаяДата,
            ФизиологическаяСтадия = физиологическаяСтадия,
            ИмяВедущегоИнспектора = имяВедущегоИнспектора,
            ДругиеИнспектора = имяВторогоИнспектора ?? "",
            ОбщиеУсловияПоля = общиеУсловнияПоля ?? "",
            Статус = 1,
        });
        контекст.SaveChanges();
    }

    public void ИзменитьИнспекцию(int идИнспекции, int типИнспекции, DateTime планируемаяДата, DateTime? фактическаяДата, string физиологическаяСтадия, string? общиеУсловнияПоля, string имяВедущегоИнспектора, string? имяВторогоИнспектора)
    {
        контекст.Инспекции
            .Where(и => и.Ид == идИнспекции)
            .ExecuteUpdate(_ => _
                .SetProperty(и => и.ТипИнспекции, типИнспекции)
                .SetProperty(и => и.ПланируемаяДата, планируемаяДата)
                .SetProperty(и => и.ФактическаяДата, фактическаяДата)
                .SetProperty(и => и.ФизиологическаяСтадия, физиологическаяСтадия)
                .SetProperty(и => и.ОбщиеУсловияПоля, общиеУсловнияПоля)
                .SetProperty(и => и.ИмяВедущегоИнспектора, имяВедущегоИнспектора ?? "")
                .SetProperty(и => и.ДругиеИнспектора, имяВторогоИнспектора ?? "")
                .SetProperty(и => и.ДатаОбновления, DateTime.UtcNow));
    }

    public Инспекция? ПолучитьИнспекцию(int идИнспекции)
    {
        return контекст.Инспекции
            .AsNoTracking()
            .FirstOrDefault(_ => _.Ид == идИнспекции);
    }

    public ПротоколПолевойИнспекции ПолучитьПротоколПолевойИнспекции(int идИнспекции)
    {
        return new(контекст.ЗаписиПолевыхИнспекций
            .AsNoTracking()
            .Where(зи => зи.ИнспекцияИд == идИнспекции)
            .ToList());
    }

    public void СохранитьПротоколПолевойИнспекции(int идИнспекции, List<ЗаписьПолевойИнспекции> записи)
    {
        var существующиеЗаписи = контекст.ЗаписиПолевыхИнспекций
            .Where(зи => зи.ИнспекцияИд == идИнспекции)
            .ToList();
        foreach (var существующаяЗапись in существующиеЗаписи)
        {
            var з = записи.FirstOrDefault(з => з.НомерСерии == существующаяЗапись.НомерСерии);
            if (з is not null)
            {
                существующаяЗапись.КоличествоРастенийВСерии = з.КоличествоРастенийВСерии;
                существующаяЗапись.Карантин = з.Карантин;
                существующаяЗапись.ВиральныеБолезни = з.ВиральныеБолезни;
                существующаяЗапись.Черноножка = з.Черноножка;
                существующаяЗапись.Безтиповые = з.Безтиповые;
                существующаяЗапись.Ризоктония = з.Ризоктония;
            }
        }

        foreach (var запись in записи)
        {
            var сз = существующиеЗаписи.FirstOrDefault(з => з.НомерСерии == запись.НомерСерии);
            if (сз is null)
            {
                запись.ИнспекцияИд = идИнспекции;
                контекст.ЗаписиПолевыхИнспекций.Add(запись);
            }
        }

        foreach (var существующаяЗапись in существующиеЗаписи.ToArray())
        {
            var сз = записи.FirstOrDefault(з => з.НомерСерии == существующаяЗапись.НомерСерии);
            if (сз is null)
            {
                существующиеЗаписи.Remove(существующаяЗапись);
                контекст.ЗаписиПолевыхИнспекций.Remove(существующаяЗапись);
            }
        }

        for (int i = 0; i < существующиеЗаписи.Count; i++)
        {
            существующиеЗаписи[i].НомерСерии = i++;
        }

        контекст.SaveChanges();
    }

    public ЗаписьИнспекцииПартии ПолучитьПротоколИнспекцииПартии(int идИнспекции)
    {
        return контекст.ЗаписиИнспекцийПартии
            .AsNoTracking()
            .FirstOrDefault(зи => зи.ИнспекцияИд == идИнспекции) ?? new();
    }

    public void СохранитьПротоколИнспекцииПартии(int идИнспекции, ЗаписьИнспекцииПартии запись)
    {
        var существующаяЗапись = контекст.ЗаписиИнспекцийПартии
            .FirstOrDefault(зи => зи.ИнспекцияИд == идИнспекции);
        var надоДобавить = существующаяЗапись is null;
        существующаяЗапись ??= new() { ИнспекцияИд = идИнспекции };
        существующаяЗапись.ВесПартии = запись.ВесПартии;
        существующаяЗапись.СухаяГниль = запись.СухаяГниль;
        существующаяЗапись.МокраяГниль = запись.МокраяГниль;
        существующаяЗапись.Фитофтороз = запись.Фитофтороз;
        существующаяЗапись.ПаршаОбыкновенная = запись.ПаршаОбыкновенная;
        существующаяЗапись.ПаршаЛуговая = запись.ПаршаЛуговая;
        существующаяЗапись.ПаршаСеребристая = запись.ПаршаСеребристая;
        существующаяЗапись.ПаршаПорошистая = запись.ПаршаПорошистая;
        существующаяЗапись.Продавленность = запись.Продавленность;
        существующаяЗапись.НезначительныеПовреждения = запись.НезначительныеПовреждения;
        существующаяЗапись.ВнешниеДефекты = запись.ВнешниеДефекты;
        существующаяЗапись.ПрилипшаяПочва = запись.ПрилипшаяПочва;
        существующаяЗапись.ПревышениеРазмеров = запись.ПревышениеРазмеров;
        существующаяЗапись.Ризоктониоз = запись.Ризоктониоз;
        существующаяЗапись.Проростания = запись.Проростания;
        существующаяЗапись.ВнутренниеДефекты = запись.ВнутренниеДефекты;
        существующаяЗапись.РаздавленныеКлубни = запись.РаздавленныеКлубни;
        существующаяЗапись.ВирусныйНекроз = запись.ВирусныйНекроз;
        существующаяЗапись.Переохлаждение = запись.Переохлаждение;
        существующаяЗапись.Вредители = запись.Вредители;
        if (надоДобавить)
        {
            контекст.Add(существующаяЗапись);
        }

        контекст.SaveChanges();
    }

    public void ПровестиИнспекцию(int идИнспекции, DateTime фактическаяДата)
    {
        контекст.Инспекции
            .Where(и => и.Ид == идИнспекции)
            .ExecuteUpdate(_ => _
                .SetProperty(и => и.Статус, 2)
                .SetProperty(и => и.ФактическаяДата, фактическаяДата)
                .SetProperty(и => и.ДатаОбновления, DateTime.UtcNow));
    }

    public void ОдобритьИнспекцию(int идИнспекции)
    {
        контекст.Инспекции
            .Where(и => и.Ид == идИнспекции)
            .ExecuteUpdate(_ => _.SetProperty(и => и.Статус, 3));
    }

    public void ОтклонитьИнспекцию(int идИнспекции)
    {
        контекст.Инспекции
            .Where(и => и.Ид == идИнспекции)
            .ExecuteUpdate(_ => _.SetProperty(и => и.Статус, 4));
    }

    public List<Анализ> ПолучитьАнализы(int идИнспекции)
    {
        return контекст.Анализы.Where(_ => _.ИнспекцияИд == идИнспекции).ToList();
    }

    public List<Анализ> ПолучитьАнализыПоСтатусу(int status)
    {
        return контекст.Анализы
            .AsNoTracking()
            .Include(а => а.Инспекция)
            .ThenInclude(и => и.Заявка)
            .Where(_ => _.Статус == status).ToList();
    }

    public void ОтправитьАнализы(int идИнспекции, List<Анализ> анализы)
    {
        foreach (var анализ in анализы)
        {
            анализ.ИнспекцияИд = идИнспекции;
            контекст.Анализы.Add(анализ);
        }

        контекст.SaveChanges();

        контекст.Инспекции
            .Where(и => и.Ид == идИнспекции)
            .ExecuteUpdate(_ => _.SetProperty(и => и.Статус, 5));
    }

    public void СохранитьАнализы(int идАнализа, byte[] файлСАнализами, 
        bool[] PLRV,
        bool[] PVA,
        bool[] PVM,
        bool[] PVX,
        bool[] PVY,
        bool[] PVS,
        bool[] Clavibacter,
        bool[] Ralstonia)
    {
        var plrv = GetInt(PLRV);
        var pva = GetInt(PVA);
        var pvm = GetInt(PVM);
        var pvx = GetInt(PVX);
        var pvy = GetInt(PVY);
        var pvs = GetInt(PVS);
        var clavibacter = GetInt(Clavibacter);
        var ralstonia = GetInt(Ralstonia);
        контекст.Анализы
            .AsNoTracking()
            .Where(а => а.Ид == идАнализа)
            .ExecuteUpdate(_ => _
                .SetProperty(а => а.ФайлСАнализами, файлСАнализами)
                .SetProperty(а => а.PLRV, plrv)
                .SetProperty(а => а.PVA, pva)
                .SetProperty(а => а.PVM, pvm)
                .SetProperty(а => а.PVX, pvx)
                .SetProperty(а => а.PVY, pvy)
                .SetProperty(а => а.PVS, pvs)
                .SetProperty(а => а.Clavibacter, clavibacter)
                .SetProperty(а => а.Ralstonia, ralstonia));
        int GetInt(bool[] values)
        {
            int result = 0;
            for (int i = 0; i < values.Length; i++)
            {
                result = (result << 1) + (values[i] ? 1 : 0);
            }

            return result;
        }
    }

    public void ОтправитьАнализы(int идАнализа)
    {
        контекст.Анализы
            .AsNoTracking()
            .Where(а => а.Ид == идАнализа)
            .ExecuteUpdate(_ => _
                .SetProperty(а => а.Статус, 2));
        var анализ = контекст.Анализы.AsNoTracking()
            .Include(а => а.Инспекция)
            .FirstOrDefault(а => а.Ид == идАнализа);
        if (анализ is not null)
        {
            var идИнспекции = анализ.ИнспекцияИд;
            var всеАнализы =
                контекст.Анализы.AsNoTracking()
                .Count(а => а.ИнспекцияИд == идИнспекции && а.Статус == 1);
            if (всеАнализы == 0)
            {
                контекст.Инспекции
                    .AsNoTracking()
                    .Where(а => а.Ид == идИнспекции)
                    .ExecuteUpdate(_ => _
                        .SetProperty(а => а.Статус, 6));
            }
        } 
    }

    public Анализ? ПолучитьАнализ(int идАнализа)
    {
        return контекст.Анализы
            .AsNoTracking()
            .FirstOrDefault(а => а.Ид == идАнализа);
    }

    public byte[]? ПолучитьРезультатыАнализов(int идАнализа) =>
        контекст.Анализы
            .AsNoTracking()
            .Where(а => а.Ид == идАнализа)
            .Select(а => а.ФайлСАнализами)
            .FirstOrDefault();

    public КлассСемян РекомендованныйКлассСемян(int идИнспекции, КлассСемян запрашиваемыйКлассСемян)
    {
        var инспекция = ПолучитьИнспекцию(идИнспекции);
        if (инспекция is null) return запрашиваемыйКлассСемян;
        return РекомендованныйКлассСемян(инспекция, запрашиваемыйКлассСемян);
    }

    public КлассСемян РекомендованныйКлассСемян(Инспекция инспекция, КлассСемян запрашиваемыйКлассСемян)
    {
        if (инспекция.ТипИнспекции == 1)
        {
            var протокол = ПолучитьПротоколПолевойИнспекции(инспекция.Ид);
            return ПравилаСертификации.РекомендованныйКлассСемян(протокол.Записи, запрашиваемыйКлассСемян);
        }

        if (инспекция.ТипИнспекции == 2)
        {
            var партия = ПолучитьПротоколИнспекцииПартии(инспекция.Ид);
            return ПравилаСертификации.РекомендованныйКлассСемян(партия, запрашиваемыйКлассСемян);
        }

        return запрашиваемыйКлассСемян;
    }

    public int? РазмерОбразца(Инспекция инспекция)
    {
        if (инспекция.ТипИнспекции == 1)
        {
            var протокол = ПолучитьПротоколПолевойИнспекции(инспекция.Ид);
            return протокол.ОбщаяЗаписьИнспекция.КоличествоРастенийВСерии;
        }

        if (инспекция.ТипИнспекции == 2)
        {
            var партия = ПолучитьПротоколИнспекцииПартии(инспекция.Ид);
            return партия.ИнспектируемыйВес;
        }

        if (инспекция.ТипИнспекции == 3)
        {
            var анализы = ПолучитьАнализы(инспекция.Ид);
            return анализы.Sum(а => а.КоличествоОбразцов);
        }

        return null;
    }
}
